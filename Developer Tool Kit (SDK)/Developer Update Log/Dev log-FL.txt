**WARNING - PROFANITY AND FOUL LANGUAGE, 13+**


Key:
 [] = completed at date specified

--PREV:
-set up definitions
-added files
-began project

20/01/2025:
Fixed the debugger and added a dataLog class to contain all checker functions. Integrated this into the script and simplified the rest_of_the_script function to 2 lines rather than 10. 

21/01/2025:
Added a sublist count system to start working on the ai module. Made a proper logo and TOS. Also added an immediate shutdown button to prevent crashing that could freeze a computer. Goals for next update: Add a working sublist [22/1/25], add a settings applications to control the future API and whether SulfurAI prints the answers etc. Will also plan to add attribute settings and guides.

22/01/2025:
Added the sublist counter tool to start counting capitals, grammar, punctuation based on autocorrect to predict whether the device is mobile or desktop. Fixed a lot of bugs. Added a device txt file to help create the final output file. [30/1/2025]

25/1/2025:
Working on davinci resolve for a few days, re-rerouted the grammar training data to a text file. The check_device ai function is now in beta and semi-working. It does not train itself yet. Next update will also work on a settings manager to toggle settings such as print values (to print the answers in python or to a text file). Will also add comments to every function so Bimal & timas (and me when I forget) can understand it. [26/1/2025]

26/1/2025:
Added comments to the project. Will work on settings menu and adding more scripts to the project to simplify code.

28/1/2025:
Started working on settings menu. It will be ran in pygame, later ported to c# or java. Will attempt to verify for pygame. If the device does not have it, it will attempt to boot into the text based settings (coming later). Added a settings folder to DATA. Will work on previously mentioned stuff and adding an output (priority) [30/1/2025].

29/1/2025 (Chinese new year):
Took a small break with my family, still keeping the consistency. Put the current (singular) ai function into a class... conveniently named ai() lol. Will see if I have time to add output [30/1/2025] (because html computing test is tomorrow)!

30/1/2025:
html test is fortunately next lesson! output is finally done with the FIRST ai function!!!! oh yeah rtx 5090 released while I was in English -_- (2pm UK). I will buy a 6090 when me and my bros timas & Bimal make it. made an inspirational wallpaper for my windows screen. Also added a timer to count when it starts, finishes and how long it takes. Will focus on settings and attributes now. Will also plan to add metadata and a point system.

1/2/2025:
Added a working error log (took a while) and simplfified dev stuff into one folder. Also started working on the sulfax architechture, which will offer user interaction - allowing them to optimise the architecture to their liking.

3/2/2025:
Added working device attributes + attributes guide. Simplified all variable links (from os) that call a file into a single class called... call lol. Added beginning of the architecture with a basic run = True/False script! last 2 days I been working on my videos. Add a {} recogniser in arch class!

4/2/2025:
Added second arch function: start_arch - basically same as previous run = True/False. Will add {} recogniser + logic.

6/2/2025:
Added output ms time and customized the text file. Need to fix attributes - it does not print yet. Will add training data to sulfur tmrw.

7/2/2025:
Added a recogniser for first string capitals - does not yet work as it is biased and needs training data. GrammarCount and Capitals logic is broken.

Goals:
-Add {} recogniser
-Add training data  [11/2/2025]
-fix print attributes
-add point system
-settings : print function

9/2/2025:
working on the training data - added a script to add supervised and un-supervised training data. will work on reading it sometime! [11/2/2025]

11/2/2025:
added a prepare_data function to read and sort the data (as a base model so it reads all data). added device tags and accuracy tags to the training data. next things to add:
-feature engineering [18/2/2025]
-proper machine learning model
-splitting data into training and testing

15/2/2025:
added a new logo design for volkshub and sulfur. working on feature engineering today. [18/2/2025]


16/2/2025:
started on feature engineering for preparing data to be put into an sk-learn n-gram ml model via the new training data files for sk. made them label differently and better. the previous file will be used for other stuff (basic). will focus on this tmrw.
-remember to move the tos warner to the top of the project u shithead.

17/2/2025:
-moved tos warner to top of project + print_list function - working on adding labelled data and reading/training it tmrw.
also that's not nice >:(

18/2/2025:
added a debugger for installing pip libraries. also added labelling and training for sk.learn (n-grams). moved sk functions to a new class. FINALLY STARTED TRAINING SK.LEARN!!!!!!!!!!!! (on 1 carrots worth of data but...)!!!!!!!!!!!!!!! SO HAPPY RN COULD CRY. goal for tmrw is to fully train this model and get rid of print statements.

To do (tomorrow):
-train model with 50mb of data
-get rid of print statements and have the predicted sk outcome affect the true outcome. [19/2/2025]
-move sk training and predicting to the point areas so it can be added as a bias [19/2/2025]


To do (future):
-add a ml model for true outcome.

19/2/2025:
got rid of non-important print statements, moved sk calls to above point areas and started training the model with around 3kb of data. also improved accuracy variable and added utf-8 encoding to all write statements.

20/2/2025:
working on the ml model for true outcome. ai is creating bugs bc it wont fix the logic errors.
update on 21:30:
fixed logic errors with my buddy o3-mini. accuracy improved by 30% by my 2nd ml model.

to do (tmrw):
-fix the negative response time variable
-remove duplicates from training data and add [1]+ counters instead
-fix bugs with first capitals in training data
-fix bugs with device accuracy (not the variable), should have the sk as primary? [21/2/2025]

to do (future):
-grammar + spelling checks

21/2/2025:
-fixed bugs with device accuracy, put sklearn in priority and revamped the multiple algorithm to adjust device weights.
-fixed the negative response time variable.
-added a thinking print script to show user interaction.

to do (tmrw):
-remove duplicates from training data and add [1]+ counters instead
-fix bugs with first capitals in training data


to do (future):
-grammar + spelling checks

22/2/2025:
-fixed bugs with first capitals in training data

to do (tmrw / day after):
-remove duplicates from training data and add [1]+ counters instead



to do (future):
-grammar + spelling checks

23/2/25:
revamped sulfur architechure and moved calling and predict ai function to a different python file to simplify. currently has a recursion error but..

26/2/25:
fixed the recursion error (actually a circular import error) and moved all ai logic for check_device to the other script. took 5 hours to debug :(

to do (tmrw / day after):
-remove duplicates from training data and add [1]+ counters instead



to do (future):
-grammar + spelling checks

2/3/2025:
-fixed training data bug for training data not being written to the renderer (only the custom ml model, sk data is still broken)

to do (tmrw / day after):
-fix sk training data [tmrw]



to do (future):
-being working on code efficiency, with mojo, cython, CUDA etc [day after]
-remove duplicates from training data and add [1]+ counters instead
-grammar + spelling checks

3/3/2025:
-fixed sk training data 

to do (tmrw / day after):
-fix device_accuracy instance bug and text format error when printing to training data (not sk)



to do (future):
-being working on code efficiency, with mojo, cython, CUDA etc [day after]
-remove duplicates from training data and add [1]+ counters instead
-grammar + spelling checks


5/3/2025:
-fixed device_accuracy instance bug + added randomiser variable to conserve space on the normal training_data

to do (tmrw / day after):
fix text format error when printing to training data (not sk) the one where it spells every letter out
fix accuracy not being improved over time from same text objects



to do (future):
-being working on code efficiency, with mojo, cython, CUDA etc [day+ after]
-remove duplicates from training data and add [1]+ counters instead
-grammar + spelling checks

8/3/2025:
-fixed text format error when printing to training data (not sk) the one where it spells every letter out


to do (tmrw / day after):
fix accuracy not being improved over time from same text objects



to do (future):
-being working on code efficiency, with mojo, cython, CUDA etc [day+ after]
-remove duplicates from training data and add [1]+ counters instead
-grammar + spelling checks

10/3/2025:
-fixed accuracy not being improved over time from same text objects (it is an average not a global counter that is improved via positive)
-started working on second function, shows the mean device [today] and accuracy
-found a bug that device_accuracy file is not written to ;-;


to do (tmrw / day after):
-fix device_accuracy not being written to
-show main device accuracy


to do (future):
-fix invalid line error based on self call
-being working on code efficiency, with mojo, cython, CUDA etc [day+ after]
-remove duplicates from training data and add [1]+ counters instead
-grammar + spelling checks

11/3/2025:
-fixed device_accuracy not being written to


to do (tmrw / day after):
-show main device accuracy, hinted with line 325 check_device_s.py [13,3,2025]


to do (future):
-fix invalid line error based on self call
-being working on code efficiency, with mojo, cython, CUDA etc [day+ after]
-remove duplicates from training data and add [1]+ counters instead
-grammar + spelling checks

13/3/2025:
-added main device accuracy, hinted with line 325 check_device_s.py


to do (tmrw / day after):
-fix invalid line error based on self call


to do (future):
-being working on code efficiency, with mojo, cython, CUDA etc [day+ after]
-remove duplicates from training data and add [1]+ counters instead
-grammar + spelling checks

17/3/2025:
-fixed invalid line error based on self call - its due to an error with how it handles commas so cannot be fixed ;-;
fixed invalid line error for mean_device_s with commas - easier to fix due to the placement of training data for sk


to do (tmrw / day after):
-being working on code efficiency, with mojo, cython, CUDA etc [day+ after]
-fix the range for random.randint in the average being wayyy too high - maybe make it random.randint(99 + placeholder / 2, placeholder)


to do (future):
-remove duplicates from training data and add [1]+ counters instead [business version]
-grammar + spelling checks

18/3/2025:
-fixed the range for random.randint in the average being wayyy too high 


to do (tmrw / day after):
-being working on code efficiency, with mojo, cython, CUDA etc [business version] [day+ after]



to do (future):
-remove duplicates from training data and add [1]+ counters instead [business version]
-grammar + spelling checks

20/3/2025:
-worked on code efficiency, 327x speed boost via converting to c# and compiling (done by timas) [business version]
-added grammar checking and fixed machine learning. 
-fixed debug() being called too much resulting in more prints


to do (tmrw / day after):
-remove duplicates from training data and add [1]+ counters instead [business version]
-fix the machine learning exact phrases being too high, 68 > 99 is bad !
-add pip install backup to the settings !

to do (future):
-add machine learning grammar [business version]
-add feature to create own ai functions
#comment: grammar may cause efficiency issues down the line, check with compiling first

21/3/2025:
-added pip install backup to the settings 


to do (tmrw / day after):
-remove duplicates from training data and add [1]+ counters instead [business version]
-fix the machine learning exact phrases being too high, 68 > 99 is bad !


to do (future):
-add machine learning grammar [business version]
-add feature to create own ai functions
#comment: grammar may cause efficiency issues down the line, check with compiling first

22/3/2025:
[upd a]
-removed debug statements from sulfur, must be enabled in the settings:
 -added settings debug buttons


to do (tmrw / day after):
-remove duplicates from training data and add [1]+ counters instead [business version]
-fix the machine learning exact phrases being too high, 68 > 99 is bad !


to do (future):
-add machine learning grammar [business version]
-add feature to create own ai functions
#comment: grammar may cause efficiency issues down the line, check with compiling first

23/3/2025:
added training data backup incase it is cleared or deleted.
-fixed the machine learning exact phrases being too high, it is simple an average based on grammar

to do (tmrw / day after):
-!! make it so that if training data is cleared it is re-written with the backup. [25/3/2025]
-remove duplicates from training data and add [1]+ counters instead [business version]



to do (future):
-add machine learning grammar [business version]
-add feature to create own ai functions
#comment: grammar may cause efficiency issues down the line, check with compiling first

25/3/2025:
- made it so that if training data is cleared it is re-written with the backup.

to do (tmrw / day after):
-make the backup training data re-writing a toggable mode (with a caution) in the settings
-make error codes for the errors , including the error() function
-improve code efficiency by only reading with keywords [business version]
-remove duplicates from training data and add [1]+ counters instead [business version]



to do (future):
-add machine learning grammar [business version]
-add feature to create own ai functions
#comment: grammar may cause efficiency issues down the line, check with compiling first

26/3/2025:
-made error codes for the errors , including the error() function
-made the backup training data re-writing a toggable mode (with a caution) in the settings

to do (tmrw / day after):
-start working on preferences
-improve code efficiency by only reading with keywords [business version]
-remove duplicates from training data and add [1]+ counters instead [business version]



to do (future):
-add machine learning grammar [business version]
-add feature to create own ai functions
#comment: grammar may cause efficiency issues down the line, check with compiling first

27/3/2025:
-started working on preferences, added nltk support and added a user preferences output.


to do (tmrw / day after):
-fix line 252 sulfur
-add a global training data output for preferences
-improve code efficiency by only reading with keywords [business version]
-remove duplicates from training data and add [1]+ counters instead [business version]



to do (future):
-add machine learning grammar [business version]
-add feature to create own ai functions
#comment: grammar may cause efficiency issues down the line, check with compiling first

28/3/2025:
-fixed line 252 sulfur - the open scriot was READING it not WRITING to it.
-added a global training data output for preferences



to do (tmrw / day after):
-add summarised preferences with chatgpt or general sentence generator libs
-improve code efficiency by only reading with keywords [business version]
-remove duplicates from training data and add [1]+ counters instead [business version]



to do (future):
-add machine learning grammar [business version]
-add feature to create own ai functions
#comment: grammar may cause efficiency issues down the line, check with compiling first

29/3/2025:
- summarised preferences with chatgpt or general sentence generator libs is not possible on a lo(am)
- added preferred nouns, eg "user wants (noun)"

  -21:31:
	-version 42b, fixed a critical word bug that exists if cleaned_nouns is 0




to do (tmrw / day after):
- add preferred verbs, eg "user wants to do (verb)"
-improve code efficiency by only reading with keywords [business version]
-remove duplicates from training data and add [1]+ counters instead [business version]



to do (future):
-add machine learning grammar [business version]
-add feature to create own ai functions
#comment: grammar may cause efficiency issues down the line, check with compiling first

30/3/2025:
-added preferred verbs, eg "user wants to do (verb)"
-revamped the output file to be cleaner
-added small print text, "*SulfurAI can make mistakes. Check important info.\n"




to do (tmrw / day after):
-fix the accuracy for them both (verbs + nouns)
-preference attributes
-improve code efficiency by only reading with keywords [business version]
-remove duplicates from training data and add [1]+ counters instead [business version]



to do (future):
-add machine learning grammar [business version]
-add feature to create own ai functions
#comment: grammar may cause efficiency issues down the line, check with compiling first

1/4/2025:
-April fools lol, released sulfur lrl onto poe. actually works better thane xpected
-added adjective preferences
-fixed language error if there is no text but just an emoji
-im gna stop milking preferences I swear





to do (tmrw / day after):
-fix the accuracy for them both (verbs + nouns)
-preference attributes
-improve code efficiency by only reading with keywords [business version]
-remove duplicates from training data and add [1]+ counters instead [business version]



to do (future):
-add machine learning grammar [business version]
-add feature to create own ai functions
#comment: grammar may cause efficiency issues down the line, check with compiling first

3/4/2025:
-cease and desist tmrw, ill say how it went :/ :( :) >:) >:(
-added preference attributes
-revamped how check_device_s.py checks attributes





to do (tmrw / day after):
-fix the accuracy for them both (verbs + nouns)
-improve code efficiency by only reading with keywords [business version]
-remove duplicates from training data and add [1]+ counters instead [business version]



to do (future):
-add machine learning grammar [business version]
-add feature to create own ai functions
#comment: grammar may cause efficiency issues down the line, check with compiling first

4/4/2025:
-cease and desist was not handed due to no mention - can still be on April 22nd when we come back,  :/ 
File "D:\VolksHub 21.1.2025 005\[VH] AI production line (DEVSET)\SulfurAI\SulfurAI (not consumer ready)\SulfurAI-DRL 001-03\DATA\ai_renderer\Mean_device_s.py", line 46, in get_main_accuracy
    placeholder1 = int(float(line_list[-2]))
                             ~~~~~~~~~^^^^
IndexError: list index out of range
*fix it tmrw
-added a mood preference for the user
-fixed bugs






to do (tmrw / day after):
-add a mood preference for the global*
-add a mood preference accuracy
-fix the whitespace input
-fix the mood accuracy - fixed at 21:21 - I think
-fix the accuracy for them both (verbs + nouns)
-improve code efficiency by only reading with keywords [business version]
-remove duplicates from training data and add [1]+ counters instead [business version]



to do (future):
-add machine learning grammar [business version]
-add feature to create own ai functions
#comment: grammar may cause efficiency issues down the line, check with compiling first

5/4/2025:

File "D:\VolksHub 21.1.2025 005\[VH] AI production line (DEVSET)\SulfurAI\SulfurAI (not consumer ready)\SulfurAI-DRL 001-03\DATA\ai_renderer\Mean_device_s.py", line 46, in get_main_accuracy
    placeholder1 = int(float(line_list[-2]))
                             ~~~~~~~~~^^^^
IndexError: list index out of range
*fixed it 
-fixed the mood accuracy 

UPDATE B)

-simplified mood preferences into a single function instead of user/global







to do (tmrw / day after):
-add a mood preference for the global*
-add a mood preference accuracy*

-fix the whitespace input
-fix the accuracy for them both (verbs + nouns) for preferences

-improve code length by simplifying user and global functions to use if statements instead of double functions that do the same thing for all functions

-improve code efficiency by only reading with keywords [business version]
-remove duplicates from training data and add [1]+ counters instead [business version]



to do (future):
-add machine learning grammar [business version]
-add feature to create own ai functions
#comment: grammar may cause efficiency issues down the line, check with compiling first

6/4/2025:
-added a mood preference accuracy








to do (tmrw / day after):

-add global accuracy for mood*

-fix the whitespace input*
-fix the accuracy for them both (verbs + nouns) for preferences

-improve code length by simplifying user and global functions to use if statements instead of double functions that do the same thing for all functions*

-improve code efficiency by only reading with keywords [business version]
-remove duplicates from training data and add [1]+ counters instead [business version]



to do (future):
-add machine learning grammar [business version]
-add feature to create own ai functions
#comment: grammar may cause efficiency issues down the line, check with compiling first

7/4/2025:
-add global accuracy for mood
-revamped the mood script to be cleaner








to do (tmrw / day after):


-fix the whitespace input*
-fix the accuracy for them both (verbs + nouns) for preferences

-improve code length by simplifying user and global functions to use if statements instead of double functions that do the same thing for all functions*

-improve code efficiency by only reading with keywords [business version]
-remove duplicates from training data and add [1]+ counters instead [business version]



to do (future):
-add machine learning grammar [business version]
-add feature to create own ai functions
#comment: grammar may cause efficiency issues down the line, check with compiling first


8/4/2025:
-fixed the 3 days before this, date was broken
-version 50 yay!
-improveed code length by simplifying user and global functions to use if statements instead of double functions that do the same thing for all functions (preferences)
-prepared for meeting tomorrow
-created a mock-up ad (hawk tuah)







to do (tmrw / day after):


-fix the whitespace input*
-fix the accuracy for them both (verbs + nouns) for preferences*



-improve code efficiency by only reading with keywords [business version]
-remove duplicates from training data and add [1]+ counters instead [business version]



to do (future):
-add machine learning grammar [business version]
-add feature to create own ai functions
#comment: grammar may cause efficiency issues down the line, check with compiling first

9/4/2025:
-fixed the whitespace input*
- the finishing script is now after the output thing. this was unintentional but im going to keep it lmao







to do (tmrw / day after):



-fix the accuracy for them both (verbs + nouns) for preferences*



-improve code efficiency by only reading with keywords [business version]
-remove duplicates from training data and add [1]+ counters instead [business version]



to do (future):
-add machine learning grammar [business version]
-add feature to create own ai functions
#comment: grammar may cause efficiency issues down the line, check with compiling first

10/4/2025:
-added a user:global mood accuracy



to do (tmrw / day after):



-fix the accuracy for them both (verbs + nouns) for preferences*



-improve code efficiency by only reading with keywords [business version]
-remove duplicates from training data and add [1]+ counters instead [business version]



to do (future):
-add machine learning grammar [business version]
-add feature to create own ai functions
#comment: grammar may cause efficiency issues down the line, check with compiling first

11/4/2025:
-fixed error code
-simplified the code
-started working on verifying input becase apparently comparing unchecked strings to a database is a bad idea LOL



to do (tmrw / day after):



-fix the accuracy for them both (verbs + nouns) for preferences*



-improve code efficiency by only reading with keywords [business version]
-remove duplicates from training data and add [1]+ counters instead [business version]



to do (future):
-add machine learning grammar [business version]
-add feature to create own ai functions
#comment: grammar may cause efficiency issues down the line, check with compiling first

12-13/4/2025:
-verified input and removed characters that could be used for commands
-added a limit cap of 50 for input
-wont be adding length of the verify file to the length update log for security reasons


update 1-3-54c:
-fixed the limit cap not stripping



to do (tmrw / day after):

-make the input warning at the output only shown if something is removed*
-make the input limit adjustable in the settings*



-fix the accuracy for them both (verbs + nouns) for preferences*



-improve code efficiency by only reading with keywords [business version]
-remove duplicates from training data and add [1]+ counters instead [business version]



to do (future):
-add machine learning grammar [business version]
-add feature to create own ai functions
#comment: grammar may cause efficiency issues down the line, check with compiling first


14/4/2025:
-made the input warning at the output only shown if something is removed
-started work on making the input limit adjustable in the settings
-also put this version on GitHub as a branch




to do (tmrw / day after):
-make it so the limit is toggable to be processed or ignored in settings*






-fix the accuracy for them both (verbs + nouns) for preferences*



-improve code efficiency by only reading with keywords [business version]
-remove duplicates from training data and add [1]+ counters instead [business version]



to do (future):
-add machine learning grammar [business version]
-add feature to create own ai functions
#comment: grammar may cause efficiency issues down the line, check with compiling first

15/4/2025:
-made it so the limit is toggable to be processed or ignored in settings
-changed output so it says It could affect output




to do (tmrw / day after):



-finish work on making the input limit adjustable in the settings*


-fix the accuracy for them both (verbs + nouns) for preferences*



-improve code efficiency by only reading with keywords [business version]
-remove duplicates from training data and add [1]+ counters instead [business version]



to do (future):
-add machine learning grammar [business version]
-add feature to create own ai functions
#comment: grammar may cause efficiency issues down the line, check with compiling first

16/4/2025:
-finished work on making the input limit adjustable in the settings
-revamped pip install so it works correctly
-switched from pygame -> pygame community edition so it can support pygame gui




to do (tmrw / day after):


-fix the accuracy for them both (verbs + nouns) for preferences*



-improve code efficiency by only reading with keywords [business version]
-remove duplicates from training data and add [1]+ counters instead [business version]



to do (future):
-add machine learning grammar [business version]
-add feature to create own ai functions
#comment: grammar may cause efficiency issues down the line, check with compiling first

18/4/2025:
-Added a neural networking system with TensorFlow
-Python was downgraded from version 3.13 -> 3.11 due to compatibility issues
-Preparing to move many renderer files to the VersionDATA, again for compatibility
-Improved code efficiency
-Revamped the output to contain how it is processed
-UpdateLog folder was removed and replaced with a .md

Version 1-3-59:
-moved renderer files to the VersionDATA
-added a message saying restart sulfur when installing library but failed import
-simplified pip scripts
-Moved TOS notice to the top.



to do (tmrw / day after):
-add sentence type + infer globally*
-add sentence type + infer accuracy*



-fix the accuracy for them both (verbs + nouns) for preferences*



-improve code efficiency by only reading with keywords [business version]
-remove duplicates from training data and add [1]+ counters instead [business version]



to do (future):
-add machine learning grammar [business version]
-add feature to create own ai functions
#comment: grammar may cause efficiency issues down the line, check with compiling first

20/4/2025:
-merged training data files back into data for better compatibility
-added a compatability score to compatible versions 

-version 1-03-61:
-added sentence type + infer globally
-added sentence type + infer accuracy

to do (tmrw / day after):



-fix the accuracy for them both (verbs + nouns) for preferences*



-improve code efficiency by only reading with keywords [business version]
-remove duplicates from training data and add [1]+ counters instead [business version]



to do (future):
-add machine learning grammar [business version]
-add feature to create own ai functions
#comment: grammar may cause efficiency issues down the line, check with compiling first

21/4/2025:
-added output data for the sentence function globally
-added new error codes to support them

to do (tmrw / day after):
-start working on analysing the sentence data to answer it like an ai model


-fix the accuracy for them both (verbs + nouns) for preferences*



-improve code efficiency by only reading with keywords [business version]
-remove duplicates from training data and add [1]+ counters instead [business version]



to do (future):
-add machine learning grammar [business version]
-add feature to create own ai functions
#comment: grammar may cause efficiency issues down the line, check with compiling first
















